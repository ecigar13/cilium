// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyInstancePlacementCommon = "ModifyInstancePlacement"

// ModifyInstancePlacementCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyInstancePlacementCommon operation. The "output" return
// value will be populated with the ModifyInstancePlacementCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstancePlacementCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstancePlacementCommon Send returns without error.
//
// See ModifyInstancePlacementCommon for more information on using the ModifyInstancePlacementCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstancePlacementCommonRequest method.
//    req, resp := client.ModifyInstancePlacementCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstancePlacementCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstancePlacementCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstancePlacementCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ModifyInstancePlacementCommon for usage and error information.
func (c *ECS) ModifyInstancePlacementCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstancePlacementCommonRequest(input)
	return out, req.Send()
}

// ModifyInstancePlacementCommonWithContext is the same as ModifyInstancePlacementCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstancePlacementCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstancePlacementCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstancePlacementCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstancePlacement = "ModifyInstancePlacement"

// ModifyInstancePlacementRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyInstancePlacement operation. The "output" return
// value will be populated with the ModifyInstancePlacementCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstancePlacementCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstancePlacementCommon Send returns without error.
//
// See ModifyInstancePlacement for more information on using the ModifyInstancePlacement
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstancePlacementRequest method.
//    req, resp := client.ModifyInstancePlacementRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstancePlacementRequest(input *ModifyInstancePlacementInput) (req *request.Request, output *ModifyInstancePlacementOutput) {
	op := &request.Operation{
		Name:       opModifyInstancePlacement,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstancePlacementInput{}
	}

	output = &ModifyInstancePlacementOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstancePlacement API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ModifyInstancePlacement for usage and error information.
func (c *ECS) ModifyInstancePlacement(input *ModifyInstancePlacementInput) (*ModifyInstancePlacementOutput, error) {
	req, out := c.ModifyInstancePlacementRequest(input)
	return out, req.Send()
}

// ModifyInstancePlacementWithContext is the same as ModifyInstancePlacement with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstancePlacement for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstancePlacementWithContext(ctx volcengine.Context, input *ModifyInstancePlacementInput, opts ...request.Option) (*ModifyInstancePlacementOutput, error) {
	req, out := c.ModifyInstancePlacementRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyInstancePlacementInput struct {
	_ struct{} `type:"structure"`

	Affinity *string `type:"string"`

	ClientToken *string `type:"string"`

	DedicatedHostId *string `type:"string"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ModifyInstancePlacementInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstancePlacementInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyInstancePlacementInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyInstancePlacementInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAffinity sets the Affinity field's value.
func (s *ModifyInstancePlacementInput) SetAffinity(v string) *ModifyInstancePlacementInput {
	s.Affinity = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *ModifyInstancePlacementInput) SetClientToken(v string) *ModifyInstancePlacementInput {
	s.ClientToken = &v
	return s
}

// SetDedicatedHostId sets the DedicatedHostId field's value.
func (s *ModifyInstancePlacementInput) SetDedicatedHostId(v string) *ModifyInstancePlacementInput {
	s.DedicatedHostId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstancePlacementInput) SetInstanceId(v string) *ModifyInstancePlacementInput {
	s.InstanceId = &v
	return s
}

type ModifyInstancePlacementOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyInstancePlacementOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstancePlacementOutput) GoString() string {
	return s.String()
}
