// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRenewDedicatedHostCommon = "RenewDedicatedHost"

// RenewDedicatedHostCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewDedicatedHostCommon operation. The "output" return
// value will be populated with the RenewDedicatedHostCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewDedicatedHostCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewDedicatedHostCommon Send returns without error.
//
// See RenewDedicatedHostCommon for more information on using the RenewDedicatedHostCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewDedicatedHostCommonRequest method.
//    req, resp := client.RenewDedicatedHostCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewDedicatedHostCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewDedicatedHostCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewDedicatedHostCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation RenewDedicatedHostCommon for usage and error information.
func (c *ECS) RenewDedicatedHostCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewDedicatedHostCommonRequest(input)
	return out, req.Send()
}

// RenewDedicatedHostCommonWithContext is the same as RenewDedicatedHostCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewDedicatedHostCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewDedicatedHostCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewDedicatedHostCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewDedicatedHost = "RenewDedicatedHost"

// RenewDedicatedHostRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewDedicatedHost operation. The "output" return
// value will be populated with the RenewDedicatedHostCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewDedicatedHostCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewDedicatedHostCommon Send returns without error.
//
// See RenewDedicatedHost for more information on using the RenewDedicatedHost
// API call, and error handling.
//
//    // Example sending a request using the RenewDedicatedHostRequest method.
//    req, resp := client.RenewDedicatedHostRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewDedicatedHostRequest(input *RenewDedicatedHostInput) (req *request.Request, output *RenewDedicatedHostOutput) {
	op := &request.Operation{
		Name:       opRenewDedicatedHost,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewDedicatedHostInput{}
	}

	output = &RenewDedicatedHostOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewDedicatedHost API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation RenewDedicatedHost for usage and error information.
func (c *ECS) RenewDedicatedHost(input *RenewDedicatedHostInput) (*RenewDedicatedHostOutput, error) {
	req, out := c.RenewDedicatedHostRequest(input)
	return out, req.Send()
}

// RenewDedicatedHostWithContext is the same as RenewDedicatedHost with the addition of
// the ability to pass a context and additional request options.
//
// See RenewDedicatedHost for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewDedicatedHostWithContext(ctx volcengine.Context, input *RenewDedicatedHostInput, opts ...request.Option) (*RenewDedicatedHostOutput, error) {
	req, out := c.RenewDedicatedHostRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RenewDedicatedHostInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	// DedicatedHostId is a required field
	DedicatedHostId *string `type:"string" required:"true"`

	// Period is a required field
	Period *int32 `type:"int32" required:"true"`

	// PeriodUnit is a required field
	PeriodUnit *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RenewDedicatedHostInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewDedicatedHostInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewDedicatedHostInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewDedicatedHostInput"}
	if s.DedicatedHostId == nil {
		invalidParams.Add(request.NewErrParamRequired("DedicatedHostId"))
	}
	if s.Period == nil {
		invalidParams.Add(request.NewErrParamRequired("Period"))
	}
	if s.PeriodUnit == nil {
		invalidParams.Add(request.NewErrParamRequired("PeriodUnit"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *RenewDedicatedHostInput) SetClientToken(v string) *RenewDedicatedHostInput {
	s.ClientToken = &v
	return s
}

// SetDedicatedHostId sets the DedicatedHostId field's value.
func (s *RenewDedicatedHostInput) SetDedicatedHostId(v string) *RenewDedicatedHostInput {
	s.DedicatedHostId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RenewDedicatedHostInput) SetPeriod(v int32) *RenewDedicatedHostInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewDedicatedHostInput) SetPeriodUnit(v string) *RenewDedicatedHostInput {
	s.PeriodUnit = &v
	return s
}

type RenewDedicatedHostOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s RenewDedicatedHostOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewDedicatedHostOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *RenewDedicatedHostOutput) SetOrderId(v string) *RenewDedicatedHostOutput {
	s.OrderId = &v
	return s
}
