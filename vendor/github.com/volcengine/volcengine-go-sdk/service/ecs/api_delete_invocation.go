// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteInvocationCommon = "DeleteInvocation"

// DeleteInvocationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteInvocationCommon operation. The "output" return
// value will be populated with the DeleteInvocationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteInvocationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteInvocationCommon Send returns without error.
//
// See DeleteInvocationCommon for more information on using the DeleteInvocationCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteInvocationCommonRequest method.
//    req, resp := client.DeleteInvocationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInvocationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInvocationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInvocationCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteInvocationCommon for usage and error information.
func (c *ECS) DeleteInvocationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInvocationCommonRequest(input)
	return out, req.Send()
}

// DeleteInvocationCommonWithContext is the same as DeleteInvocationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInvocationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInvocationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInvocationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInvocation = "DeleteInvocation"

// DeleteInvocationRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteInvocation operation. The "output" return
// value will be populated with the DeleteInvocationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteInvocationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteInvocationCommon Send returns without error.
//
// See DeleteInvocation for more information on using the DeleteInvocation
// API call, and error handling.
//
//    // Example sending a request using the DeleteInvocationRequest method.
//    req, resp := client.DeleteInvocationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInvocationRequest(input *DeleteInvocationInput) (req *request.Request, output *DeleteInvocationOutput) {
	op := &request.Operation{
		Name:       opDeleteInvocation,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteInvocationInput{}
	}

	output = &DeleteInvocationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInvocation API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteInvocation for usage and error information.
func (c *ECS) DeleteInvocation(input *DeleteInvocationInput) (*DeleteInvocationOutput, error) {
	req, out := c.DeleteInvocationRequest(input)
	return out, req.Send()
}

// DeleteInvocationWithContext is the same as DeleteInvocation with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInvocation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInvocationWithContext(ctx volcengine.Context, input *DeleteInvocationInput, opts ...request.Option) (*DeleteInvocationOutput, error) {
	req, out := c.DeleteInvocationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteInvocationInput struct {
	_ struct{} `type:"structure"`

	// InvocationId is a required field
	InvocationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteInvocationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInvocationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteInvocationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteInvocationInput"}
	if s.InvocationId == nil {
		invalidParams.Add(request.NewErrParamRequired("InvocationId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInvocationId sets the InvocationId field's value.
func (s *DeleteInvocationInput) SetInvocationId(v string) *DeleteInvocationInput {
	s.InvocationId = &v
	return s
}

type DeleteInvocationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InvocationId *string `type:"string"`
}

// String returns the string representation
func (s DeleteInvocationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInvocationOutput) GoString() string {
	return s.String()
}

// SetInvocationId sets the InvocationId field's value.
func (s *DeleteInvocationOutput) SetInvocationId(v string) *DeleteInvocationOutput {
	s.InvocationId = &v
	return s
}
