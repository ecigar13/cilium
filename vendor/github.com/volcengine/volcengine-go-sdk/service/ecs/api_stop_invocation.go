// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopInvocationCommon = "StopInvocation"

// StopInvocationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopInvocationCommon operation. The "output" return
// value will be populated with the StopInvocationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopInvocationCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopInvocationCommon Send returns without error.
//
// See StopInvocationCommon for more information on using the StopInvocationCommon
// API call, and error handling.
//
//	// Example sending a request using the StopInvocationCommonRequest method.
//	req, resp := client.StopInvocationCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) StopInvocationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopInvocationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StopInvocationCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation StopInvocationCommon for usage and error information.
func (c *ECS) StopInvocationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopInvocationCommonRequest(input)
	return out, req.Send()
}

// StopInvocationCommonWithContext is the same as StopInvocationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopInvocationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInvocationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopInvocationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInvocation = "StopInvocation"

// StopInvocationRequest generates a "volcengine/request.Request" representing the
// client's request for the StopInvocation operation. The "output" return
// value will be populated with the StopInvocationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopInvocationCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopInvocationCommon Send returns without error.
//
// See StopInvocation for more information on using the StopInvocation
// API call, and error handling.
//
//	// Example sending a request using the StopInvocationRequest method.
//	req, resp := client.StopInvocationRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) StopInvocationRequest(input *StopInvocationInput) (req *request.Request, output *StopInvocationOutput) {
	op := &request.Operation{
		Name:       opStopInvocation,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopInvocationInput{}
	}

	output = &StopInvocationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StopInvocation API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation StopInvocation for usage and error information.
func (c *ECS) StopInvocation(input *StopInvocationInput) (*StopInvocationOutput, error) {
	req, out := c.StopInvocationRequest(input)
	return out, req.Send()
}

// StopInvocationWithContext is the same as StopInvocation with the addition of
// the ability to pass a context and additional request options.
//
// See StopInvocation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInvocationWithContext(ctx volcengine.Context, input *StopInvocationInput, opts ...request.Option) (*StopInvocationOutput, error) {
	req, out := c.StopInvocationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StopInvocationInput struct {
	_ struct{} `type:"structure"`

	InvocationId *string `type:"string"`
}

// String returns the string representation
func (s StopInvocationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInvocationInput) GoString() string {
	return s.String()
}

// SetInvocationId sets the InvocationId field's value.
func (s *StopInvocationInput) SetInvocationId(v string) *StopInvocationInput {
	s.InvocationId = &v
	return s
}

type StopInvocationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InvocationId *string `type:"string"`
}

// String returns the string representation
func (s StopInvocationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInvocationOutput) GoString() string {
	return s.String()
}

// SetInvocationId sets the InvocationId field's value.
func (s *StopInvocationOutput) SetInvocationId(v string) *StopInvocationOutput {
	s.InvocationId = &v
	return s
}
