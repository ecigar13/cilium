// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteCommandCommon = "DeleteCommand"

// DeleteCommandCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteCommandCommon operation. The "output" return
// value will be populated with the DeleteCommandCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCommandCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCommandCommon Send returns without error.
//
// See DeleteCommandCommon for more information on using the DeleteCommandCommon
// API call, and error handling.
//
//	// Example sending a request using the DeleteCommandCommonRequest method.
//	req, resp := client.DeleteCommandCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DeleteCommandCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCommandCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCommandCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteCommandCommon for usage and error information.
func (c *ECS) DeleteCommandCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCommandCommonRequest(input)
	return out, req.Send()
}

// DeleteCommandCommonWithContext is the same as DeleteCommandCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCommandCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteCommandCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCommandCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCommand = "DeleteCommand"

// DeleteCommandRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteCommand operation. The "output" return
// value will be populated with the DeleteCommandCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCommandCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCommandCommon Send returns without error.
//
// See DeleteCommand for more information on using the DeleteCommand
// API call, and error handling.
//
//	// Example sending a request using the DeleteCommandRequest method.
//	req, resp := client.DeleteCommandRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DeleteCommandRequest(input *DeleteCommandInput) (req *request.Request, output *DeleteCommandOutput) {
	op := &request.Operation{
		Name:       opDeleteCommand,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteCommandInput{}
	}

	output = &DeleteCommandOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCommand API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteCommand for usage and error information.
func (c *ECS) DeleteCommand(input *DeleteCommandInput) (*DeleteCommandOutput, error) {
	req, out := c.DeleteCommandRequest(input)
	return out, req.Send()
}

// DeleteCommandWithContext is the same as DeleteCommand with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCommand for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteCommandWithContext(ctx volcengine.Context, input *DeleteCommandInput, opts ...request.Option) (*DeleteCommandOutput, error) {
	req, out := c.DeleteCommandRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteCommandInput struct {
	_ struct{} `type:"structure"`

	CommandId *string `type:"string"`
}

// String returns the string representation
func (s DeleteCommandInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCommandInput) GoString() string {
	return s.String()
}

// SetCommandId sets the CommandId field's value.
func (s *DeleteCommandInput) SetCommandId(v string) *DeleteCommandInput {
	s.CommandId = &v
	return s
}

type DeleteCommandOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CommandId *string `type:"string"`
}

// String returns the string representation
func (s DeleteCommandOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCommandOutput) GoString() string {
	return s.String()
}

// SetCommandId sets the CommandId field's value.
func (s *DeleteCommandOutput) SetCommandId(v string) *DeleteCommandOutput {
	s.CommandId = &v
	return s
}
