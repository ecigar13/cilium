// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAllocateDedicatedHostsCommon = "AllocateDedicatedHosts"

// AllocateDedicatedHostsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AllocateDedicatedHostsCommon operation. The "output" return
// value will be populated with the AllocateDedicatedHostsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AllocateDedicatedHostsCommon Request to send the API call to the service.
// the "output" return value is not valid until after AllocateDedicatedHostsCommon Send returns without error.
//
// See AllocateDedicatedHostsCommon for more information on using the AllocateDedicatedHostsCommon
// API call, and error handling.
//
//    // Example sending a request using the AllocateDedicatedHostsCommonRequest method.
//    req, resp := client.AllocateDedicatedHostsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) AllocateDedicatedHostsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAllocateDedicatedHostsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AllocateDedicatedHostsCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation AllocateDedicatedHostsCommon for usage and error information.
func (c *ECS) AllocateDedicatedHostsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AllocateDedicatedHostsCommonRequest(input)
	return out, req.Send()
}

// AllocateDedicatedHostsCommonWithContext is the same as AllocateDedicatedHostsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AllocateDedicatedHostsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) AllocateDedicatedHostsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AllocateDedicatedHostsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAllocateDedicatedHosts = "AllocateDedicatedHosts"

// AllocateDedicatedHostsRequest generates a "volcengine/request.Request" representing the
// client's request for the AllocateDedicatedHosts operation. The "output" return
// value will be populated with the AllocateDedicatedHostsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AllocateDedicatedHostsCommon Request to send the API call to the service.
// the "output" return value is not valid until after AllocateDedicatedHostsCommon Send returns without error.
//
// See AllocateDedicatedHosts for more information on using the AllocateDedicatedHosts
// API call, and error handling.
//
//    // Example sending a request using the AllocateDedicatedHostsRequest method.
//    req, resp := client.AllocateDedicatedHostsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) AllocateDedicatedHostsRequest(input *AllocateDedicatedHostsInput) (req *request.Request, output *AllocateDedicatedHostsOutput) {
	op := &request.Operation{
		Name:       opAllocateDedicatedHosts,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AllocateDedicatedHostsInput{}
	}

	output = &AllocateDedicatedHostsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AllocateDedicatedHosts API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation AllocateDedicatedHosts for usage and error information.
func (c *ECS) AllocateDedicatedHosts(input *AllocateDedicatedHostsInput) (*AllocateDedicatedHostsOutput, error) {
	req, out := c.AllocateDedicatedHostsRequest(input)
	return out, req.Send()
}

// AllocateDedicatedHostsWithContext is the same as AllocateDedicatedHosts with the addition of
// the ability to pass a context and additional request options.
//
// See AllocateDedicatedHosts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) AllocateDedicatedHostsWithContext(ctx volcengine.Context, input *AllocateDedicatedHostsInput, opts ...request.Option) (*AllocateDedicatedHostsOutput, error) {
	req, out := c.AllocateDedicatedHostsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AllocateDedicatedHostsInput struct {
	_ struct{} `type:"structure"`

	AutoPlacement *string `type:"string"`

	AutoRenew *bool `type:"boolean"`

	AutoRenewPeriod *int32 `type:"int32"`

	ChargeType *string `type:"string"`

	ClientToken *string `type:"string"`

	Count *int32 `type:"int32"`

	CpuOvercommitRatio *float64 `type:"double"`

	// DedicatedHostName is a required field
	DedicatedHostName *string `type:"string" required:"true"`

	DedicatedHostRecovery *string `type:"string"`

	// DedicatedHostTypeId is a required field
	DedicatedHostTypeId *string `type:"string" required:"true"`

	Description *string `type:"string"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	// ZoneId is a required field
	ZoneId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AllocateDedicatedHostsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllocateDedicatedHostsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AllocateDedicatedHostsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AllocateDedicatedHostsInput"}
	if s.DedicatedHostName == nil {
		invalidParams.Add(request.NewErrParamRequired("DedicatedHostName"))
	}
	if s.DedicatedHostTypeId == nil {
		invalidParams.Add(request.NewErrParamRequired("DedicatedHostTypeId"))
	}
	if s.ZoneId == nil {
		invalidParams.Add(request.NewErrParamRequired("ZoneId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoPlacement sets the AutoPlacement field's value.
func (s *AllocateDedicatedHostsInput) SetAutoPlacement(v string) *AllocateDedicatedHostsInput {
	s.AutoPlacement = &v
	return s
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *AllocateDedicatedHostsInput) SetAutoRenew(v bool) *AllocateDedicatedHostsInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *AllocateDedicatedHostsInput) SetAutoRenewPeriod(v int32) *AllocateDedicatedHostsInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *AllocateDedicatedHostsInput) SetChargeType(v string) *AllocateDedicatedHostsInput {
	s.ChargeType = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *AllocateDedicatedHostsInput) SetClientToken(v string) *AllocateDedicatedHostsInput {
	s.ClientToken = &v
	return s
}

// SetCount sets the Count field's value.
func (s *AllocateDedicatedHostsInput) SetCount(v int32) *AllocateDedicatedHostsInput {
	s.Count = &v
	return s
}

// SetCpuOvercommitRatio sets the CpuOvercommitRatio field's value.
func (s *AllocateDedicatedHostsInput) SetCpuOvercommitRatio(v float64) *AllocateDedicatedHostsInput {
	s.CpuOvercommitRatio = &v
	return s
}

// SetDedicatedHostName sets the DedicatedHostName field's value.
func (s *AllocateDedicatedHostsInput) SetDedicatedHostName(v string) *AllocateDedicatedHostsInput {
	s.DedicatedHostName = &v
	return s
}

// SetDedicatedHostRecovery sets the DedicatedHostRecovery field's value.
func (s *AllocateDedicatedHostsInput) SetDedicatedHostRecovery(v string) *AllocateDedicatedHostsInput {
	s.DedicatedHostRecovery = &v
	return s
}

// SetDedicatedHostTypeId sets the DedicatedHostTypeId field's value.
func (s *AllocateDedicatedHostsInput) SetDedicatedHostTypeId(v string) *AllocateDedicatedHostsInput {
	s.DedicatedHostTypeId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *AllocateDedicatedHostsInput) SetDescription(v string) *AllocateDedicatedHostsInput {
	s.Description = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *AllocateDedicatedHostsInput) SetPeriod(v int32) *AllocateDedicatedHostsInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *AllocateDedicatedHostsInput) SetPeriodUnit(v string) *AllocateDedicatedHostsInput {
	s.PeriodUnit = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *AllocateDedicatedHostsInput) SetZoneId(v string) *AllocateDedicatedHostsInput {
	s.ZoneId = &v
	return s
}

type AllocateDedicatedHostsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	DedicatedHostIds []*string `type:"list"`
}

// String returns the string representation
func (s AllocateDedicatedHostsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllocateDedicatedHostsOutput) GoString() string {
	return s.String()
}

// SetDedicatedHostIds sets the DedicatedHostIds field's value.
func (s *AllocateDedicatedHostsOutput) SetDedicatedHostIds(v []*string) *AllocateDedicatedHostsOutput {
	s.DedicatedHostIds = v
	return s
}
